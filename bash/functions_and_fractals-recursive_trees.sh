#!/bin/bash

################################################################################
# Creating a Fractal Tree from Y-shaped branches
#
# This challenge involves the construction of trees, in the form of ASCII Art.
#
# We have to deal with real world constraints, so we cannot keep repeating the 
# pattern infinitely. So, we will provide you a number of iterations, and you 
# need to generate the ASCII version of the Fractal Tree for only those many 
# iterations (or, levels of recursion). A few samples are provided below.
#
# Iteration #1 
# In the beginning, we simply create a Y. There are 63 rows and 100 columns in 
# the grid below. The triangle is composed of underscores and ones as shown below.
# The vertical segment and the slanting segments are both 16 characters in length.
#
# ________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#_________________________________1_______________________________1__________________________________
#__________________________________1_____________________________1___________________________________
#___________________________________1___________________________1____________________________________
#____________________________________1_________________________1_____________________________________
#_____________________________________1_______________________1______________________________________
#______________________________________1_____________________1_______________________________________
#_______________________________________1___________________1________________________________________
#________________________________________1_________________1_________________________________________
#_________________________________________1_______________1__________________________________________
#__________________________________________1_____________1___________________________________________
#___________________________________________1___________1____________________________________________
#____________________________________________1_________1_____________________________________________
#_____________________________________________1_______1______________________________________________
#______________________________________________1_____1_______________________________________________
#_______________________________________________1___1________________________________________________
#________________________________________________1_1_________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#
#
# Iteration #2
# At the top of the left and right branches of the first Y, we now add a pair i
# of Y-shapes, which are half the size of the original Y.
#
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#____________________________________________________________________________________________________
#_________________________1_______________1_______________1_______________1__________________________
#__________________________1_____________1_________________1_____________1___________________________
#___________________________1___________1___________________1___________1____________________________
#____________________________1_________1_____________________1_________1_____________________________
#_____________________________1_______1_______________________1_______1______________________________
#______________________________1_____1_________________________1_____1_______________________________
#_______________________________1___1___________________________1___1________________________________
#________________________________1_1_____________________________1_1_________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#_________________________________1_______________________________1__________________________________
#__________________________________1_____________________________1___________________________________
#___________________________________1___________________________1____________________________________
#____________________________________1_________________________1_____________________________________
#_____________________________________1_______________________1______________________________________
#______________________________________1_____________________1_______________________________________
#_______________________________________1___________________1________________________________________
#________________________________________1_________________1_________________________________________
#_________________________________________1_______________1__________________________________________
#__________________________________________1_____________1___________________________________________
#___________________________________________1___________1____________________________________________
#____________________________________________1_________1_____________________________________________
#_____________________________________________1_______1______________________________________________
#______________________________________________1_____1_______________________________________________
#_______________________________________________1___1________________________________________________
#________________________________________________1_1_________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#_________________________________________________1__________________________________________________
#
# Input Format 
# A single integer, N.
#
# Constraints 
# N <= 5
#
# Output Format 
# The Nth iteration of the Fractal Tree, as shown above. It should be a matrix 
# of 63 rows and 100 columns. (i.e. 6300 printable characters) It should be 
# composed entirely of underscores and ones, in a manner similar to the examples
# provided. Do not include any extra leading or trailing spaces.

MIN_N=0
MAX_N=5
NUMBER_ROWS=63
NUMBER_COLUMNS=100
declare -A arr

function init_array {
    for i in $(seq 1 $NUMBER_ROWS)
    do
        for j in $(seq 1 $NUMBER_COLUMNS)
        do
            arr[$i,$j]="_"
        done
    done
}

function print_tree {
    for i in $(seq 1 $NUMBER_ROWS)
    do
        for j in $(seq 1 $NUMBER_COLUMNS)
        do
            printf ${arr[$i,$j]}
        done
        echo ""
    done
}

function draw_tree {
    if [ "$1" -eq "0" ]; then
        return
    fi
    number_of_trees=$1

    #initial column is the middle of the rows size
    initialcolumn=$((NUMBER_COLUMNS / 2))

    for (( current_tree=1; current_tree<=number_of_trees; current_tree++))
    do
        # tree's size, from bottom to top, is as follow:
        # tree #1: 32
        # tree #2: 16
        # tree #3: 8
        # tree #4: 4
        # tree #5: 1
        power=$[6 - $current_tree]
        size=$[2**$power]
        half_size=$((size / 2))
        
        initialcolumn=$((initialcolumn - half_size))
        number_of_columns=$[2**current_tree]

        for ((current_row=0; current_row<$size; current_row++))
        do
            row=$((current_row + size))

            if [ "$current_row" -le "$half_size" ];then
                c_column=$((initialcolumn + current_row))
                n_columns=$number_of_columns
            else
                # if converged to the tree's base, then the number of columns
                # is divide by to make the Y
                c_column=$((initialcolumn + half_size))
                n_columns=$((number_of_columns / 2))
            fi

            for ((current_column=0; current_column<$n_columns; current_column++))
            do
                f_column=$c_column
                arr[$row,$f_column]="1"

                if [ "$current_row" -gt "$half_size" ];then
                    diff_column=$((2 * size))
                else
                    if [ "$((current_column % 2))" -eq "0" ];then
                        # even column
                        diff_column=$((size - 2 * current_row))
                    else
                        # odd column
                        diff_column=$((size + 2 * current_row))
                    fi
                fi
                c_column=$((f_column + diff_column)) 
            done
        done
    done
}

read n
if [ "$n" -lt "$MIN_N" ] || [ "$n" -gt "$MAX_N" ]; then
    echo "Invalid Input."
    exit -1
fi

init_array
draw_tree $n
echo "----------------------------------------------- PRINT TREE -----------------------------------------"
print_tree
